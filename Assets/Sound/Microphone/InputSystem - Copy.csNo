using Lasp;
using System.Collections;
using UnityEngine;
using TMPro;
using Unity.VisualScripting;
using System.Collections.Generic;
using System;

#region RecordedData structure

/** <summary> Structure representing recorded data 
 * containing an offset to the playback
 * </summary>*/
public struct RecordedData
{
    /**<summary> Creates a RecordedData structure  containing 
    * a <paramref name="clip"/> and an <paramref name="offset"/>
    * </summary>
    *<param name="clip"> the audio clip contained in the data </param>
    *<param name="offset"> the offset in samples from the start of the clip
    * where playback starts </param>
    */
    public RecordedData(AudioClip clip, int offset) {
        //audioClip contained in the struct
        internalClip = clip;
        // offset from the beginning of the clip where a peak was found
        this.offset = offset;
    }
    public AudioClip internalClip;
    public int offset;
}

#endregion

public class InputSystem : MonoBehaviour
{
    private const int DEFAULT_MIC = 0;
    private const int RECORDING_LENGTH_SECONDS = 1;

    #region Serialized Attributes

    [SerializeField]
    private AudioSource _internalAudioSource;
    [SerializeField]
    private GameObject _sensitivityBar;
    [SerializeField]
    private GameObject _loudestPeakBar;
    [SerializeField]
    private GameObject setBarTotal;
    [SerializeField]
    private GameObject micPointer;
    [SerializeField]
    private SerializedDictionary<string, GameObject> orangeBarDictionary;

    #endregion

    #region Audio


    private AudioSourceWithOffset _player;
    private AudioLevelTracker _tracker;
    private AudioClip inputClip;
    private AudioClip sensClip;
    private List<string> _devices;
    private int currentMic = DEFAULT_MIC;

    #endregion

    #region Necessary Data

    public int maxMicPosition = RECORDING_LENGTH_SECONDS * 44100;
    public float sensitivity = -100f;
    float[] samplesArray = new float[RECORDING_LENGTH_SECONDS * 44100];
    public float currentPeak = -100f;

    #endregion

    public bool isAdjusting = false;

    public float modifierScaleOrange;
    public float modifierScale;
    public float modifierPos;
    public float additionPos;

    public TextMeshProUGUI[] mics;

    #region Tracking

    private void setMic() {
        setMic(currentMic);
    }

    public void setMic(int i) {
        createTracker();
        currentMic = i;
        _tracker.deviceID = _devices[i];
        Debug.Log("did set mic");
    }

    private void createTracker() {
        if (_tracker != null) {
            Destroy(_tracker.gameObject);
            _tracker = null;
        }
        GameObject trackerObj = new GameObject("_tracker");
        trackerObj.transform.parent = gameObject.transform;
        _tracker = trackerObj.AddComponent<AudioLevelTracker>();
    }

    public IEnumerator SetSensitivity() {
        while (isAdjusting) {
            currentPeak = _tracker.inputLevel;
            currentPeak = (currentPeak + 50) / (50) * (100) - 100;
            _sensitivityBar.transform.localScale = new Vector2(1 + (currentPeak * modifierScale), _sensitivityBar.transform.localScale.y);
            if (currentPeak > sensitivity) {
                sensitivity = currentPeak;
                _loudestPeakBar.transform.localPosition = new Vector3((1 + (currentPeak * modifierScale)) * modifierPos + additionPos, _loudestPeakBar.transform.localPosition.y, _loudestPeakBar.transform.localPosition.z);
            }
            yield return null;
        }
        Microphone.End(Microphone.devices[currentMic]);
    }

    public void setSensitivity() {
        if (!isAdjusting) {
            setBarTotal.SetActive(true);
            sensitivity = -100;
            isAdjusting = true;

            sensClip = Microphone.Start(Microphone.devices[currentMic], true, 1, 44100);
            StartCoroutine(SetSensitivity());

        }
        else {
            isAdjusting = false;
            setBarTotal.SetActive(false);
        }
    }

    private void handleRecordingBars(string recording) {

    }

    #endregion

    #region Recording

    public void restartRecording(string recording) {
        if (Microphone.IsRecording(Microphone.devices[currentMic])) {
            Microphone.End(Microphone.devices[currentMic]);
            Debug.Log("Recording done");
            handleRecordingBars(recording);
            return;
        }
        StartCoroutine(RecordAndStore(recording));
        handleRecordingBars(recording);
    }

    IEnumerator RecordAndStore(string recording) {
        Debug.Log("recording now");
        inputClip = Microphone.Start(Microphone.devices[currentMic], false, RECORDING_LENGTH_SECONDS, 44100);
        yield return new WaitForSeconds(1);
        addToRecordings(recording, inputClip);
    }

    private RecordedData lookForLoudestPeak(AudioClip clip) {
        if (clip == null) {
            return new RecordedData(null, 0);
        }
        bool noPeak = true;
        int i = 0;
        bool chosen = false;
        int offset = 0;
        float lastVol = -1000;
        clip.GetData(samplesArray, 0);
        while (noPeak) {
            float vol = 20.0f * Mathf.Log10(samplesArray[i]);
            if (vol >= sensitivity) {
                // sets offset to be the loudest peak
                if (lastVol < vol) {
                    offset = i;
                    Debug.Log("off " + offset);
                    lastVol = vol;
                    Debug.Log("sens " + sensitivity + "\n volume at offset " + vol);
                    chosen = true;
                }
                offset = i;
                chosen = true;
                break;
            }
            i++;

            if (i >= samplesArray.Length) {
                break;
            };
        }
        if (!chosen) {
            return new RecordedData(null, 0);
        }
        if (offset >= 128) { offset -= 128; }
        return new(clip, offset);
    }

    private RecordedData FindPeak(AudioClip clip) {
        if (clip == null) {
            return new RecordedData(null, 0);
        }
        bool noPeak = true;
        int i = 0;
        bool chosen = false;
        int offset = 0;
        clip.GetData(samplesArray, 0);
        while (noPeak) {
            float vol = 20.0f * Mathf.Log10(samplesArray[i]);
            if (vol >= sensitivity) {
                offset = i;
                chosen = true;
                break;
            }
            i++;

            if (i >= samplesArray.Length) {
                break;
            };
        }
        if (!chosen) {
            return new RecordedData(null, 0);
        }
        if (offset >= 128) { offset -= 128; }
        return new(clip, offset);
    }

    public void addToRecordings(string name, AudioClip inputClip) {
        Debug.Log(inputClip);
        RecordedData recording = FindPeak(inputClip);
        if (RecordingContainer.recordings.ContainsKey(name)) {
            RecordingContainer.recordings[name] = recording;
        }
        else {
            RecordingContainer.recordings.Add(name, recording);
        }
    }

    #endregion

    #region Playing

    public void testRecording(string recording) {
        _player.Play(RecordingContainer.recordings[recording]);
    }

    #endregion




    public void Awake() {
        _player = new(_internalAudioSource);
        _devices = new();
        foreach (DeviceDescriptor device in AudioSystem.InputDevices) {
            _devices.Add(device.ID);
        }
        sensClip = Microphone.Start(Microphone.devices[currentMic], false, 1, 44100);
        for (int i = 0; i < Microphone.devices.Length; i++) {
            Debug.Log("Microphone " + i + ": " + Microphone.devices[i]);
            if (i < mics.Length) {
                mics[i].text = Microphone.devices[i];
            }
        }
        setMic();
    }


    public void Update() {
    }
}


