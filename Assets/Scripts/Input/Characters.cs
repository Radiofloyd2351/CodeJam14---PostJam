//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/Characters.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Characters: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Characters()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Characters"",
    ""maps"": [
        {
            ""name"": ""Basic Actions"",
            ""id"": ""2394509e-660c-4e7c-bcc6-9a95d322c5ba"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""cb9f8223-80ba-4c5d-8df1-2e0c737f0b2e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""0193cdfc-711d-4cfa-af94-8f1ff4f5af80"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialMove"",
                    ""type"": ""Button"",
                    ""id"": ""5168ea14-6af9-4634-9362-c363608db036"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""9eccb1f2-2382-44fe-ad40-f8dac943f733"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Instrument1"",
                    ""type"": ""Button"",
                    ""id"": ""9584c007-2c63-4fe0-a759-6cd624bd8d68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Instrument2"",
                    ""type"": ""Button"",
                    ""id"": ""4dfae9d9-6271-4305-b15f-648b5c05a4e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Instrument3"",
                    ""type"": ""Button"",
                    ""id"": ""5b190013-1b98-4ce9-900b-9cea95476e06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Instrument4"",
                    ""type"": ""Button"",
                    ""id"": ""607e1b44-cead-4fda-8f4a-1f2e9ea4a3f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""6382014e-a95f-43aa-af8f-ad07ad91ec40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f3cd5967-1ae9-446a-bf8d-d2542ee5aa7e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Movement"",
                    ""id"": ""fe9c1dcf-766c-4780-8780-69f324ce51b7"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a5aad2fc-558e-45af-8a8f-c06402068c33"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1f3a41ef-ae1e-48c7-b76f-6c230d9704f2"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b31860b3-d340-452f-837a-e1ae42112653"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""48498b1b-c7de-49a5-a469-90b644d87bfa"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""552c8791-846a-43c0-bd28-a2452e238b97"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5602f352-a68e-4f36-ac94-dffa83f448de"",
                    ""path"": ""<Keyboard>/#(E)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6f0e26a-8741-4b00-a125-d127cc71e234"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce5e9709-3cb1-47b7-b747-f6a20735422f"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""573f26a3-4062-4171-98ea-60f439c14f9a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=0)"",
                    ""groups"": """",
                    ""action"": ""Instrument1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""683d0eb6-6e53-443b-aa01-d614bb8b8c3f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ce5e8ec-4426-41ee-b88b-ec029e2c2a99"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": ""Scale"",
                    ""groups"": """",
                    ""action"": ""Instrument2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""798807b6-f3ad-4139-bfa6-7646be929df3"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=2)"",
                    ""groups"": """",
                    ""action"": ""Instrument3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dce1462c-71ff-4fba-9740-d4363ed84dde"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=3)"",
                    ""groups"": """",
                    ""action"": ""Instrument4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8178c8a8-7d01-48c9-ae24-7e1c729d0a03"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65226c10-a54d-411b-b8dd-09b2ba1712cf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Basic Actions
        m_BasicActions = asset.FindActionMap("Basic Actions", throwIfNotFound: true);
        m_BasicActions_Movement = m_BasicActions.FindAction("Movement", throwIfNotFound: true);
        m_BasicActions_Interact = m_BasicActions.FindAction("Interact", throwIfNotFound: true);
        m_BasicActions_SpecialMove = m_BasicActions.FindAction("SpecialMove", throwIfNotFound: true);
        m_BasicActions_Menu = m_BasicActions.FindAction("Menu", throwIfNotFound: true);
        m_BasicActions_Instrument1 = m_BasicActions.FindAction("Instrument1", throwIfNotFound: true);
        m_BasicActions_Instrument2 = m_BasicActions.FindAction("Instrument2", throwIfNotFound: true);
        m_BasicActions_Instrument3 = m_BasicActions.FindAction("Instrument3", throwIfNotFound: true);
        m_BasicActions_Instrument4 = m_BasicActions.FindAction("Instrument4", throwIfNotFound: true);
        m_BasicActions_Attack = m_BasicActions.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Basic Actions
    private readonly InputActionMap m_BasicActions;
    private List<IBasicActionsActions> m_BasicActionsActionsCallbackInterfaces = new List<IBasicActionsActions>();
    private readonly InputAction m_BasicActions_Movement;
    private readonly InputAction m_BasicActions_Interact;
    private readonly InputAction m_BasicActions_SpecialMove;
    private readonly InputAction m_BasicActions_Menu;
    private readonly InputAction m_BasicActions_Instrument1;
    private readonly InputAction m_BasicActions_Instrument2;
    private readonly InputAction m_BasicActions_Instrument3;
    private readonly InputAction m_BasicActions_Instrument4;
    private readonly InputAction m_BasicActions_Attack;
    public struct BasicActionsActions
    {
        private @Characters m_Wrapper;
        public BasicActionsActions(@Characters wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_BasicActions_Movement;
        public InputAction @Interact => m_Wrapper.m_BasicActions_Interact;
        public InputAction @SpecialMove => m_Wrapper.m_BasicActions_SpecialMove;
        public InputAction @Menu => m_Wrapper.m_BasicActions_Menu;
        public InputAction @Instrument1 => m_Wrapper.m_BasicActions_Instrument1;
        public InputAction @Instrument2 => m_Wrapper.m_BasicActions_Instrument2;
        public InputAction @Instrument3 => m_Wrapper.m_BasicActions_Instrument3;
        public InputAction @Instrument4 => m_Wrapper.m_BasicActions_Instrument4;
        public InputAction @Attack => m_Wrapper.m_BasicActions_Attack;
        public InputActionMap Get() { return m_Wrapper.m_BasicActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicActionsActions set) { return set.Get(); }
        public void AddCallbacks(IBasicActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicActionsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @SpecialMove.started += instance.OnSpecialMove;
            @SpecialMove.performed += instance.OnSpecialMove;
            @SpecialMove.canceled += instance.OnSpecialMove;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
            @Instrument1.started += instance.OnInstrument1;
            @Instrument1.performed += instance.OnInstrument1;
            @Instrument1.canceled += instance.OnInstrument1;
            @Instrument2.started += instance.OnInstrument2;
            @Instrument2.performed += instance.OnInstrument2;
            @Instrument2.canceled += instance.OnInstrument2;
            @Instrument3.started += instance.OnInstrument3;
            @Instrument3.performed += instance.OnInstrument3;
            @Instrument3.canceled += instance.OnInstrument3;
            @Instrument4.started += instance.OnInstrument4;
            @Instrument4.performed += instance.OnInstrument4;
            @Instrument4.canceled += instance.OnInstrument4;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IBasicActionsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @SpecialMove.started -= instance.OnSpecialMove;
            @SpecialMove.performed -= instance.OnSpecialMove;
            @SpecialMove.canceled -= instance.OnSpecialMove;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
            @Instrument1.started -= instance.OnInstrument1;
            @Instrument1.performed -= instance.OnInstrument1;
            @Instrument1.canceled -= instance.OnInstrument1;
            @Instrument2.started -= instance.OnInstrument2;
            @Instrument2.performed -= instance.OnInstrument2;
            @Instrument2.canceled -= instance.OnInstrument2;
            @Instrument3.started -= instance.OnInstrument3;
            @Instrument3.performed -= instance.OnInstrument3;
            @Instrument3.canceled -= instance.OnInstrument3;
            @Instrument4.started -= instance.OnInstrument4;
            @Instrument4.performed -= instance.OnInstrument4;
            @Instrument4.canceled -= instance.OnInstrument4;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IBasicActionsActions instance)
        {
            if (m_Wrapper.m_BasicActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicActionsActions @BasicActions => new BasicActionsActions(this);
    public interface IBasicActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnSpecialMove(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnInstrument1(InputAction.CallbackContext context);
        void OnInstrument2(InputAction.CallbackContext context);
        void OnInstrument3(InputAction.CallbackContext context);
        void OnInstrument4(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
}
